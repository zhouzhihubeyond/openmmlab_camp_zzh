{"env_info": "sys.platform: win32\nPython: 3.8.13 (default, Mar 28 2022, 06:59:08) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: Quadro T2000\nCUDA_HOME: None\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.27.29111 \u7248\nGCC: n/a\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.2.2\nOpenCV: 4.6.0\nMMCV: 1.6.2\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[64, 128, 256, 512],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\nload_from = 'retinanet_r18_fpn_1x_coco_20220407_171055-614fd399.pth'\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        ann_file='data/kitti_tiny/train_ann.pkl',\n        img_prefix='data/kitti_tiny/training/image_2',\n        classes=[\n            'Pedestrian', 'Truck', 'Car', 'Cyclist', 'Misc', 'Van', 'Tram',\n            'Person_sitting'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        ann_file='data/kitti_tiny/test_ann.pkl',\n        img_prefix='data/kitti_tiny/training/image_2',\n        classes=[\n            'Pedestrian', 'Truck', 'Car', 'Cyclist', 'Misc', 'Van', 'Tram',\n            'Person_sitting'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        ann_file='data/kitti_tiny/test_ann.pkl',\n        img_prefix='data/kitti_tiny/training/image_2',\n        classes=[\n            'Pedestrian', 'Truck', 'Car', 'Cyclist', 'Misc', 'Van', 'Tram',\n            'Person_sitting'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=4, metric='mAP')\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=50,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=5, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs\\retinanet_r18_fpn_1x_kitti'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 290739068, "exp_name": "retinanet_r18_fpn_1x_kitti.py"}
{"mode": "train", "epoch": 1, "iter": 5, "lr": 8e-05, "memory": 711, "data_time": 2.56556, "loss_cls": 1.19941, "loss_bbox": 0.25768, "loss": 1.45709, "time": 5.17106}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.00018, "memory": 711, "data_time": 0.04625, "loss_cls": 1.17514, "loss_bbox": 0.25312, "loss": 1.42826, "time": 0.43246}
{"mode": "train", "epoch": 1, "iter": 15, "lr": 0.00028, "memory": 711, "data_time": 0.04659, "loss_cls": 1.15078, "loss_bbox": 0.1928, "loss": 1.34358, "time": 0.43124}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.00038, "memory": 711, "data_time": 0.04669, "loss_cls": 1.08803, "loss_bbox": 0.22938, "loss": 1.31741, "time": 0.43149}
{"mode": "train", "epoch": 1, "iter": 25, "lr": 0.00048, "memory": 722, "data_time": 0.04631, "loss_cls": 0.91184, "loss_bbox": 0.27284, "loss": 1.18468, "time": 0.4334}
{"mode": "train", "epoch": 2, "iter": 5, "lr": 0.00058, "memory": 722, "data_time": 2.83477, "loss_cls": 0.72251, "loss_bbox": 0.23792, "loss": 0.96043, "time": 3.2809}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.00068, "memory": 722, "data_time": 0.04628, "loss_cls": 0.74238, "loss_bbox": 0.24132, "loss": 0.9837, "time": 0.43442}
{"mode": "train", "epoch": 2, "iter": 15, "lr": 0.00078, "memory": 722, "data_time": 0.04566, "loss_cls": 0.43044, "loss_bbox": 0.20235, "loss": 0.63279, "time": 0.43127}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00088, "memory": 722, "data_time": 0.04667, "loss_cls": 0.35171, "loss_bbox": 0.19881, "loss": 0.55052, "time": 0.43603}
{"mode": "train", "epoch": 2, "iter": 25, "lr": 0.00098, "memory": 722, "data_time": 0.04688, "loss_cls": 0.41958, "loss_bbox": 0.21129, "loss": 0.63086, "time": 0.43297}
{"mode": "train", "epoch": 3, "iter": 5, "lr": 0.001, "memory": 722, "data_time": 2.91376, "loss_cls": 0.24384, "loss_bbox": 0.226, "loss": 0.46984, "time": 3.34194}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.001, "memory": 722, "data_time": 0.04647, "loss_cls": 0.34062, "loss_bbox": 0.20902, "loss": 0.54964, "time": 0.42967}
{"mode": "train", "epoch": 3, "iter": 15, "lr": 0.001, "memory": 722, "data_time": 0.0464, "loss_cls": 0.49576, "loss_bbox": 0.19683, "loss": 0.69259, "time": 0.43093}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.001, "memory": 722, "data_time": 0.04708, "loss_cls": 0.37482, "loss_bbox": 0.19549, "loss": 0.57031, "time": 0.43404}
{"mode": "train", "epoch": 3, "iter": 25, "lr": 0.001, "memory": 722, "data_time": 0.04567, "loss_cls": 0.39161, "loss_bbox": 0.20459, "loss": 0.5962, "time": 0.43222}
{"mode": "train", "epoch": 4, "iter": 5, "lr": 0.001, "memory": 722, "data_time": 2.65074, "loss_cls": 0.32182, "loss_bbox": 0.17589, "loss": 0.49771, "time": 3.0964}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.001, "memory": 722, "data_time": 0.04612, "loss_cls": 0.2792, "loss_bbox": 0.14455, "loss": 0.42375, "time": 0.4283}
{"mode": "train", "epoch": 4, "iter": 15, "lr": 0.001, "memory": 722, "data_time": 0.04639, "loss_cls": 0.2557, "loss_bbox": 0.21618, "loss": 0.47188, "time": 0.43015}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.001, "memory": 722, "data_time": 0.04668, "loss_cls": 0.27212, "loss_bbox": 0.16717, "loss": 0.43929, "time": 0.433}
{"mode": "train", "epoch": 4, "iter": 25, "lr": 0.001, "memory": 722, "data_time": 0.04609, "loss_cls": 0.33783, "loss_bbox": 0.21669, "loss": 0.55451, "time": 0.43256}
{"mode": "val", "epoch": 4, "iter": 25, "lr": 0.001, "AP50": 0.297, "mAP": 0.29656}
{"mode": "train", "epoch": 5, "iter": 5, "lr": 0.001, "memory": 722, "data_time": 2.75209, "loss_cls": 0.29624, "loss_bbox": 0.14101, "loss": 0.43725, "time": 3.18182}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.001, "memory": 722, "data_time": 0.04633, "loss_cls": 0.25914, "loss_bbox": 0.18137, "loss": 0.44052, "time": 0.43269}
{"mode": "train", "epoch": 5, "iter": 15, "lr": 0.001, "memory": 722, "data_time": 0.04657, "loss_cls": 0.17515, "loss_bbox": 0.16142, "loss": 0.33657, "time": 0.43018}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.001, "memory": 722, "data_time": 0.04688, "loss_cls": 0.28673, "loss_bbox": 0.17772, "loss": 0.46444, "time": 0.43054}
{"mode": "train", "epoch": 5, "iter": 25, "lr": 0.001, "memory": 722, "data_time": 0.04629, "loss_cls": 0.17039, "loss_bbox": 0.20383, "loss": 0.37422, "time": 0.43025}
{"mode": "train", "epoch": 6, "iter": 5, "lr": 0.001, "memory": 722, "data_time": 2.92045, "loss_cls": 0.19869, "loss_bbox": 0.18008, "loss": 0.37878, "time": 3.36452}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.001, "memory": 722, "data_time": 0.04644, "loss_cls": 0.20162, "loss_bbox": 0.1491, "loss": 0.35071, "time": 0.4292}
{"mode": "train", "epoch": 6, "iter": 15, "lr": 0.001, "memory": 722, "data_time": 0.04647, "loss_cls": 0.18796, "loss_bbox": 0.17747, "loss": 0.36543, "time": 0.4302}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.001, "memory": 722, "data_time": 0.04624, "loss_cls": 0.18467, "loss_bbox": 0.18292, "loss": 0.36758, "time": 0.43056}
{"mode": "train", "epoch": 6, "iter": 25, "lr": 0.001, "memory": 722, "data_time": 0.04579, "loss_cls": 0.24527, "loss_bbox": 0.12997, "loss": 0.37524, "time": 0.42831}
{"mode": "train", "epoch": 7, "iter": 5, "lr": 0.001, "memory": 722, "data_time": 2.75849, "loss_cls": 0.22803, "loss_bbox": 0.17604, "loss": 0.40407, "time": 3.20891}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.001, "memory": 722, "data_time": 0.04678, "loss_cls": 0.20471, "loss_bbox": 0.15496, "loss": 0.35967, "time": 0.43201}
{"mode": "train", "epoch": 7, "iter": 15, "lr": 0.001, "memory": 722, "data_time": 0.0458, "loss_cls": 0.18004, "loss_bbox": 0.14696, "loss": 0.32701, "time": 0.4288}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.001, "memory": 722, "data_time": 0.04649, "loss_cls": 0.18065, "loss_bbox": 0.14847, "loss": 0.32912, "time": 0.43147}
{"mode": "train", "epoch": 7, "iter": 25, "lr": 0.001, "memory": 722, "data_time": 0.04608, "loss_cls": 0.17029, "loss_bbox": 0.16717, "loss": 0.33747, "time": 0.4316}
{"mode": "train", "epoch": 8, "iter": 5, "lr": 0.001, "memory": 722, "data_time": 2.87208, "loss_cls": 0.14549, "loss_bbox": 0.15226, "loss": 0.29775, "time": 3.32326}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.001, "memory": 722, "data_time": 0.04569, "loss_cls": 0.12587, "loss_bbox": 0.14031, "loss": 0.26618, "time": 0.43094}
{"mode": "train", "epoch": 8, "iter": 15, "lr": 0.001, "memory": 722, "data_time": 0.04589, "loss_cls": 0.18296, "loss_bbox": 0.14517, "loss": 0.32813, "time": 0.42922}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.001, "memory": 722, "data_time": 0.04667, "loss_cls": 0.14743, "loss_bbox": 0.16824, "loss": 0.31567, "time": 0.43175}
{"mode": "train", "epoch": 8, "iter": 25, "lr": 0.001, "memory": 722, "data_time": 0.04629, "loss_cls": 0.18527, "loss_bbox": 0.13278, "loss": 0.31805, "time": 0.43005}
{"mode": "val", "epoch": 8, "iter": 25, "lr": 0.001, "AP50": 0.321, "mAP": 0.32082}
{"mode": "train", "epoch": 9, "iter": 5, "lr": 0.0001, "memory": 722, "data_time": 2.68253, "loss_cls": 0.14365, "loss_bbox": 0.19032, "loss": 0.33396, "time": 3.11511}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.0001, "memory": 722, "data_time": 0.04607, "loss_cls": 0.14462, "loss_bbox": 0.14772, "loss": 0.29234, "time": 0.43102}
{"mode": "train", "epoch": 9, "iter": 15, "lr": 0.0001, "memory": 722, "data_time": 0.04612, "loss_cls": 0.13319, "loss_bbox": 0.13713, "loss": 0.27032, "time": 0.42971}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.0001, "memory": 722, "data_time": 0.04628, "loss_cls": 0.12252, "loss_bbox": 0.10743, "loss": 0.22995, "time": 0.42926}
{"mode": "train", "epoch": 9, "iter": 25, "lr": 0.0001, "memory": 722, "data_time": 0.04648, "loss_cls": 0.12859, "loss_bbox": 0.13027, "loss": 0.25886, "time": 0.43142}
{"mode": "train", "epoch": 10, "iter": 5, "lr": 0.0001, "memory": 722, "data_time": 2.78088, "loss_cls": 0.1268, "loss_bbox": 0.14383, "loss": 0.27064, "time": 3.24648}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.0001, "memory": 722, "data_time": 0.04229, "loss_cls": 0.09955, "loss_bbox": 0.1288, "loss": 0.22835, "time": 0.42894}
{"mode": "train", "epoch": 10, "iter": 15, "lr": 0.0001, "memory": 722, "data_time": 0.04548, "loss_cls": 0.12744, "loss_bbox": 0.09391, "loss": 0.22136, "time": 0.42983}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.0001, "memory": 722, "data_time": 0.04608, "loss_cls": 0.1513, "loss_bbox": 0.12387, "loss": 0.27518, "time": 0.43188}
{"mode": "train", "epoch": 10, "iter": 25, "lr": 0.0001, "memory": 722, "data_time": 0.04628, "loss_cls": 0.15771, "loss_bbox": 0.15361, "loss": 0.31132, "time": 0.43267}
{"mode": "train", "epoch": 11, "iter": 5, "lr": 0.0001, "memory": 722, "data_time": 2.74269, "loss_cls": 0.13304, "loss_bbox": 0.14211, "loss": 0.27515, "time": 3.19468}
{"mode": "train", "epoch": 11, "iter": 10, "lr": 0.0001, "memory": 722, "data_time": 0.04625, "loss_cls": 0.10808, "loss_bbox": 0.09288, "loss": 0.20096, "time": 0.42752}
{"mode": "train", "epoch": 11, "iter": 15, "lr": 0.0001, "memory": 722, "data_time": 0.04596, "loss_cls": 0.16825, "loss_bbox": 0.15711, "loss": 0.32535, "time": 0.43117}
{"mode": "train", "epoch": 11, "iter": 20, "lr": 0.0001, "memory": 722, "data_time": 0.04608, "loss_cls": 0.14781, "loss_bbox": 0.15924, "loss": 0.30705, "time": 0.43096}
{"mode": "train", "epoch": 11, "iter": 25, "lr": 0.0001, "memory": 722, "data_time": 0.04588, "loss_cls": 0.09359, "loss_bbox": 0.11645, "loss": 0.21004, "time": 0.43087}
{"mode": "train", "epoch": 12, "iter": 5, "lr": 1e-05, "memory": 722, "data_time": 2.64708, "loss_cls": 0.11593, "loss_bbox": 0.10953, "loss": 0.22546, "time": 3.09403}
{"mode": "train", "epoch": 12, "iter": 10, "lr": 1e-05, "memory": 722, "data_time": 0.04556, "loss_cls": 0.16484, "loss_bbox": 0.12654, "loss": 0.29138, "time": 0.42772}
{"mode": "train", "epoch": 12, "iter": 15, "lr": 1e-05, "memory": 722, "data_time": 0.04568, "loss_cls": 0.13374, "loss_bbox": 0.12802, "loss": 0.26176, "time": 0.4286}
{"mode": "train", "epoch": 12, "iter": 20, "lr": 1e-05, "memory": 722, "data_time": 0.04567, "loss_cls": 0.10268, "loss_bbox": 0.15307, "loss": 0.25575, "time": 0.43034}
{"mode": "train", "epoch": 12, "iter": 25, "lr": 1e-05, "memory": 722, "data_time": 0.04593, "loss_cls": 0.15385, "loss_bbox": 0.17476, "loss": 0.32861, "time": 0.42994}
{"mode": "val", "epoch": 12, "iter": 25, "lr": 1e-05, "AP50": 0.333, "mAP": 0.33339}
