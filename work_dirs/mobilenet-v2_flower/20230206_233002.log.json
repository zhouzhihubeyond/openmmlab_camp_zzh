{"env_info": "sys.platform: win32\nPython: 3.8.13 (default, Mar 28 2022, 06:59:08) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: Quadro T2000\nCUDA_HOME: None\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.27.29111 \u7248\nGCC: n/a\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.2.2\nOpenCV: 4.6.0\nMMCV: 1.6.2\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.3\nMMClassification: 0.25.0+", "seed": 1719769723, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV2', widen_factor=1.0),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=1280,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, 5)))\nload_from = 'mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='data/flower_dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='data/flower_dataset/val',\n        ann_file=None,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='data/flower_dataset/val',\n        ann_file=None,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', gamma=0.5, step=1)\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs\\mobilenet-v2_flower'\ngpu_ids = range(0, 1)\ndevice = 'cuda'\nseed = 1719769723\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.005, "memory": 2455, "data_time": 1.20228, "loss": 1.21851, "time": 1.84664}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.005, "memory": 2455, "data_time": 0.01496, "loss": 0.42024, "time": 0.25183}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.005, "memory": 2455, "data_time": 0.01466, "loss": 0.38634, "time": 0.25033}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.005, "memory": 2455, "data_time": 0.01476, "loss": 0.47768, "time": 0.25132}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.005, "memory": 2455, "data_time": 0.01497, "loss": 0.43018, "time": 0.25053}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.005, "memory": 2455, "data_time": 0.01476, "loss": 0.46335, "time": 0.251}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.005, "memory": 2455, "data_time": 0.01466, "loss": 0.49054, "time": 0.25101}
{"mode": "val", "epoch": 1, "iter": 18, "lr": 0.005, "accuracy_top-1": 86.88811, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0025, "memory": 2455, "data_time": 0.21956, "loss": 0.33569, "time": 0.47089}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0025, "memory": 2455, "data_time": 0.01487, "loss": 0.29328, "time": 0.25079}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.0025, "memory": 2455, "data_time": 0.01468, "loss": 0.29557, "time": 0.25081}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.0025, "memory": 2455, "data_time": 0.01446, "loss": 0.24113, "time": 0.25078}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0025, "memory": 2455, "data_time": 0.01424, "loss": 0.28056, "time": 0.2511}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.0025, "memory": 2455, "data_time": 0.01466, "loss": 0.276, "time": 0.25143}
{"mode": "train", "epoch": 2, "iter": 70, "lr": 0.0025, "memory": 2455, "data_time": 0.01456, "loss": 0.2644, "time": 0.25193}
{"mode": "val", "epoch": 2, "iter": 18, "lr": 0.0025, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00125, "memory": 2455, "data_time": 0.21826, "loss": 0.28482, "time": 0.46929}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00125, "memory": 2455, "data_time": 0.01436, "loss": 0.23587, "time": 0.25148}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.00125, "memory": 2455, "data_time": 0.01427, "loss": 0.2136, "time": 0.25198}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.00125, "memory": 2455, "data_time": 0.01416, "loss": 0.25061, "time": 0.25243}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00125, "memory": 2455, "data_time": 0.01406, "loss": 0.1816, "time": 0.25202}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.00125, "memory": 2455, "data_time": 0.01417, "loss": 0.22138, "time": 0.25141}
{"mode": "train", "epoch": 3, "iter": 70, "lr": 0.00125, "memory": 2455, "data_time": 0.01446, "loss": 0.22693, "time": 0.25242}
{"mode": "val", "epoch": 3, "iter": 18, "lr": 0.00125, "accuracy_top-1": 93.88112, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00063, "memory": 2455, "data_time": 0.21626, "loss": 0.16319, "time": 0.46696}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00063, "memory": 2455, "data_time": 0.01496, "loss": 0.21248, "time": 0.25133}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00063, "memory": 2455, "data_time": 0.01466, "loss": 0.15408, "time": 0.2513}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.00063, "memory": 2455, "data_time": 0.01446, "loss": 0.24453, "time": 0.25135}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00063, "memory": 2455, "data_time": 0.01446, "loss": 0.26519, "time": 0.25154}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.00063, "memory": 2455, "data_time": 0.01446, "loss": 0.15878, "time": 0.25125}
{"mode": "train", "epoch": 4, "iter": 70, "lr": 0.00063, "memory": 2455, "data_time": 0.01466, "loss": 0.17364, "time": 0.25079}
{"mode": "val", "epoch": 4, "iter": 18, "lr": 0.00063, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00031, "memory": 2455, "data_time": 0.21466, "loss": 0.16137, "time": 0.4618}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00031, "memory": 2455, "data_time": 0.01456, "loss": 0.17651, "time": 0.25173}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00031, "memory": 2455, "data_time": 0.01446, "loss": 0.16171, "time": 0.2514}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.00031, "memory": 2455, "data_time": 0.01426, "loss": 0.12192, "time": 0.25108}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00031, "memory": 2455, "data_time": 0.01446, "loss": 0.16305, "time": 0.25136}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.00031, "memory": 2455, "data_time": 0.01434, "loss": 0.17745, "time": 0.25296}
{"mode": "train", "epoch": 5, "iter": 70, "lr": 0.00031, "memory": 2455, "data_time": 0.01351, "loss": 0.13992, "time": 0.24968}
{"mode": "val", "epoch": 5, "iter": 18, "lr": 0.00031, "accuracy_top-1": 95.45454, "accuracy_top-5": 100.0}
